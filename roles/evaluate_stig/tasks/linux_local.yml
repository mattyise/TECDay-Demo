- name: Ensure destination directory exists
  ansible.builtin.file:
    path: '{{ destination_path }}'
    state: directory

# Install Dependencies - CANES systems should be registered to Satellite for system package updates
- name: Install system dependencies
  ansible.builtin.package:
    name: '{{ item }}'
    state: present
  loop:
    - 'lshw'
  become: true

# in case of failure before cleanup, the cleanup will not occur at the end so adding a cleanup task here
- name: Find all Evaluate-STIG_* content
  ansible.builtin.find:
    paths: '{{ execution_path }}'
    patterns: 'Evaluate-STIG_*'
    file_type: directory
  register: previous_evaluate_stig
  become: true

- name: Clean up previous Evaluate-STIG directory
  ansible.builtin.file:
    path: '{{ item.path }}'
    state: absent
  loop: '{{ previous_evaluate_stig.files }}'

- name: Clean up previous Evaluate-STIG results
  ansible.builtin.file:
    path: '{{ item }}'
    state: absent
  loop:
    - '{{ destination_path }}/{{ inventory_hostname | upper }}'
    - '{{ destination_path }}/{{ inventory_hostname }}.zip'
    - '{{ destination_path }}/Evaluate-STIG/'
  become: true

# Copy and extract the Evaluate-STIG, powershell archive to the remote host
- name: Find the most recent Evaluate-STIG archive
  ansible.builtin.find:
    paths: '{{ persistent_data }}/software/dsl'
    patterns: 'Evaluate-STIG_*.zip'
    file_type: file
    age: 0
    age_stamp: mtime
  register: zip_files
  delegate_to: localhost

- name: Ensure Evaluate-STIG file is found
  ansible.builtin.fail:
    msg: 'No Evaluate-STIG_<version>.zip file found!'
  when: zip_files.files | length == 0

- name: Get the most recent evaluate stig file
  ansible.builtin.set_fact:
    most_recent_evaluate_stig_binary: '{{ zip_files.files | sort(attribute="mtime", reverse=true) | first }}'

- name: Ensure destination path exists for evaluate stig
  ansible.builtin.file:
    path: '{{ execution_path }}/{{ most_recent_evaluate_stig_binary.path | basename | regex_replace(".zip$", "") }}'
    state: directory

- name: Copy and extract the most recent Evaluate-STIG zip file to the remote host
  ansible.builtin.unarchive:
    src: '{{ most_recent_evaluate_stig_binary.path }}'
    dest: '{{ execution_path }}/{{ most_recent_evaluate_stig_binary.path | basename | regex_replace(".zip$", "") }}'
    remote_src: false  # False because the file starts on the local machine
    owner: '{{ ansible_user }}'
    group: '{{ ansible_user }}'

# Copy the powershell tar file to the remote host
- name: Set PowerShell major and minor version based on Linux OS version
  ansible.builtin.set_fact:
    powershell_major_version: "7"
    powershell_minor_version: '{{ "2" if ansible_distribution_major_version == "7" else "4" }}'

- name: Find the most recent powershell tar file
  ansible.builtin.find:
    paths: '{{ persistent_data }}/software/dsl'
    patterns: 'powershell-{{ powershell_major_version }}.{{ powershell_minor_version }}*.tar.gz'
    file_type: file
    age: 0
    age_stamp: mtime
  register: tar_files
  delegate_to: localhost

- name: Ensure powershell tar file is found
  ansible.builtin.fail:
    msg: 'No powershell-<version>.tar.gz file found!'
  when: tar_files.files | length == 0

- name: Get the most recent powershell tar file
  ansible.builtin.set_fact:
    most_recent_powershell_binary: '{{ tar_files.files | sort(attribute="mtime", reverse=true) | first }}'

- name: Copy powershell tar file to remote host
  ansible.builtin.copy:
    src: '{{ most_recent_powershell_binary.path }}'
    dest: '{{ execution_path }}/{{ most_recent_evaluate_stig_binary.path | basename | regex_replace(".zip$", "") }}/Evaluate-STIG/powershell.tar.gz'
    mode: '0644'
  register: copy_result

- name: Ensure destination path exists for powershell
  ansible.builtin.file:
    path: '{{ execution_path }}/{{ most_recent_evaluate_stig_binary.path | basename | regex_replace(".zip$", "") }}/Evaluate-STIG/powershell/'
    state: directory

- name: Extract the powershell tar.gz file to the remote host
  ansible.builtin.unarchive:
    src: '{{ execution_path }}/{{ most_recent_evaluate_stig_binary.path | basename | regex_replace(".zip$", "") }}/Evaluate-STIG/powershell.tar.gz'
    dest: '{{ execution_path }}/{{ most_recent_evaluate_stig_binary.path | basename | regex_replace(".zip$", "") }}/Evaluate-STIG/powershell/'
    remote_src: true
    owner: '{{ ansible_user }}'
    group: '{{ ansible_user }}'

- name: Determine if fapolicy is enabled and started
  ansible.builtin.service_facts:

- block:
    - name: Add Evaluate Tool to fapolicyd
      ansible.builtin.shell: fapolicyd-cli --file add '{{ execution_path }}/{{ most_recent_evaluate_stig_binary.path | basename | regex_replace(".zip$", "") }}'
      register: fapolicyd_result
      failed_when: fapolicyd_result.stderr != "" and "After removing duplicates, there is nothing to add" not in fapolicyd_result.stderr
      become: true

    - name: Remove temporary powershell directory
      ansible.builtin.file:
        path: '{{ execution_path }}/{{ most_recent_evaluate_stig_binary.path | basename | regex_replace(".zip$", "") }}/Evaluate-STIG/powershell/'
        state: absent

    - name: Restart fapolicyd
      ansible.builtin.service:
        name: fapolicyd
        state: restarted
      become: true
  when:
    - "'fapolicyd.service' in ansible_facts.services"
    - ansible_facts.services['fapolicyd.service'].status == 'enabled'
    - ansible_facts.services['fapolicyd.service'].state == 'running'

# Execute the evaluate tool on the remote host
- name: Run Evaluate-STIG on remote Linux host
  ansible.builtin.shell: 'sh {{ execution_path }}/{{ most_recent_evaluate_stig_binary.path | basename | regex_replace(".zip$", "") }}/Evaluate-STIG/{{ evaluate_stig_command }} --output {{ evaluate_stig_output }} --outputPath {{ destination_path }}'
  async: 1200 # Timeout after 20 minutes
  poll: 15
  register: stig_result
  ignore_errors: true
  become: true

# Copy results to Desktop and stop execution
- name: Ensure Desktop directory exists
  ansible.builtin.file:
    path: /home/admin/Desktop
    state: directory
    owner: admin
    group: admin
    mode: '0755'
  become: true

- name: Copy results folder to Desktop
  ansible.builtin.shell: |
    if [ -d "{{ destination_path }}/{{ inventory_hostname | upper }}" ]; then
      cp -r {{ destination_path }}/{{ inventory_hostname | upper }} /home/admin/Desktop/
      chown -R admin:admin /home/admin/Desktop/{{ inventory_hostname | upper }}
      echo "STIG results successfully copied from {{ destination_path }}/{{ inventory_hostname | upper }} to /home/admin/Desktop/{{ inventory_hostname | upper }}"
    else
      echo "WARNING: {{ destination_path }}/{{ inventory_hostname | upper }} does not exist"
      exit 1
    fi
  become: true
  register: copy_result

- name: Display completion message
  ansible.builtin.debug:
    msg: |
      STIG evaluation and copy complete!
      Source: {{ destination_path }}/{{ inventory_hostname | upper }}
      Destination: /home/admin/Desktop/{{ inventory_hostname | upper }}
      Status: {{ copy_result.stdout | default('Copy completed') }}
      Stopping execution now.

- name: Stop host execution
  ansible.builtin.meta: end_host

- block:
    - name: Remove Evaluate Tool from fapolicyd
      ansible.builtin.shell: fapolicyd-cli --file delete '{{ execution_path }}/{{ most_recent_evaluate_stig_binary.path | basename | regex_replace(".zip$", "") }}'
      register: fapolicyd_result
      failed_when: fapolicyd_result.stderr != "" and "After removing duplicates, there is nothing to add" not in fapolicyd_result.stderr
      become: true

    - name: Restart fapolicyd
      ansible.builtin.service:
        name: fapolicyd
        state: restarted
      become: true
  when:
    - "'fapolicyd.service' in ansible_facts.services"
    - ansible_facts.services['fapolicyd.service'].status == 'enabled'
    - ansible_facts.services['fapolicyd.service'].state == 'running'

# Process the results locally - copy to linux_destination_path
- name: Process Evaluate-STIG Results Locally
  block:
    - name: Ensure destination folder exists locally
      ansible.builtin.file:
        path: '{{ linux_destination_path }}/{{ phase_path }}/{{ inventory_hostname | upper }}'
        state: directory
        owner: admin
        group: admin
        mode: '0755'
      become: true

    - name: Copy results to desktop
      ansible.builtin.shell: |
        cp -r {{ destination_path }}/{{ inventory_hostname | upper }}/* {{ linux_destination_path }}/{{ phase_path }}/{{ inventory_hostname | upper }}/
        chown -R admin:admin {{ linux_destination_path }}/{{ phase_path }}/{{ inventory_hostname | upper }}
      become: true
  when:
    - stig_result is not failed or "Failed" in stig_result.stderr

# Extract STIG results
- name: Read HTML file using slurp
  ansible.builtin.slurp:
    src: '{{ destination_path }}/{{ inventory_hostname | upper }}/SummaryReport.html'
  register: html_file

- name: Decode HTML content
  ansible.builtin.set_fact:
    html_content: "{{ html_file.content | b64decode }}"

- name: Extract the stig names
  ansible.builtin.set_fact:
    stig_names: >-
      {{ html_content | regex_findall('<a.*class="stig_button".*>(.*?)</a>', '\\1') }}

- name: Extract the stig scores
  ansible.builtin.set_fact:
    stig_scores: >-
      {{ stig_scores | default({}) | combine({item: html_content | regex_findall(item + '(?:[\s\S]*?(\d+(?:\.\d+)?%)(?:(?:\s+)?<\/td>)[\s\S]*?)</tr>', '\\1') | first }) }}
  loop: '{{ stig_names }}'

# Clean up
- name: Find all Evaluate-STIG_* content
  ansible.builtin.find:
    paths: '{{ execution_path }}'
    patterns: 'Evaluate-STIG_*'
    file_type: directory
  register: used_evaluate_stig
  become: true

- name: Clean up previous Evaluate-STIG directory
  ansible.builtin.file:
    path: '{{ item.path }}'
    state: absent
  loop: '{{ used_evaluate_stig.files }}'

- name: Clean up Evaluate-STIG results from temp location
  ansible.builtin.file:
    path: '{{ item }}'
    state: absent
  loop:
    - '{{ destination_path }}/{{ inventory_hostname | upper }}'
    - '{{ destination_path }}/{{ inventory_hostname }}.zip'
    - '{{ destination_path }}/Evaluate-STIG/'
  become: true

# Display STIG Results
- name: Display STIG scores
  ansible.builtin.debug:
    msg: |
      {{ item.key }} - {{ item.value }}
  loop: '{{ stig_scores | dict2items }}'